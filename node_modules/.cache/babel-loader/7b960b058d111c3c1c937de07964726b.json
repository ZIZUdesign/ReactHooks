{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Eier\\\\Desktop\\\\Udmey\\\\ReactHooks\\\\src\\\\components\\\\Login\\\\Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useReducer } from 'react';\nimport Card from '../UI/Card/Card';\nimport classes from './Login.module.css';\nimport Button from '../UI/Button/Button';\nimport userEvent from '@testing-library/user-event'; // state here is the latest snapshot received and a new state to be returned \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst emailReducer = (state, action) => {\n  //check the type of action\n  if (action.type === 'USER_INPUT') {\n    // this is the new state\n    return {\n      value: action.val,\n      isValid: action.val.includes('@')\n    };\n  }\n\n  if (action.type === 'INPUT:_BLUR') {\n    return {\n      value: state.value,\n      isValid: state.value.includes('@')\n    };\n  } // this is the initial state \n\n\n  return {\n    value: '',\n    isValid: false\n  };\n}; // the reducer function that accepts an action and the latest snapshot and then returns a new \n// state \n\n\nconst passwordReducer = (state, action) => {\n  return {\n    value: '',\n    isValid: false\n  };\n};\n\nconst Login = props => {\n  _s();\n\n  // this two states about email can be managed combined using useReducer() Hook \n  // By giving an initial values like value: '', and isValid: false\n  // const [enteredEmail, setEnteredEmail] = useState('');\n  // const [emailIsValid, setEmailIsValid] = useState();\n  const [enteredPassword, setEnteredPassword] = useState('');\n  const [passwordIsValid, setPasswordIsValid] = useState();\n  const [formIsValid, setFormIsValid] = useState(false); //emailState here is the latest snapshot used in the re-render/re-evaluation cycle\n  //dispatchFn is a new action that triggers un update of the state\n\n  const [emailState, dispatchEmail] = useReducer(emailReducer, {\n    //this is the initial state \n    value: '',\n    isValid: null\n  }); // the changes and the validation of password can be managed combined using useReducer()\n\n  const [passwordState, dispatchPassword] = useReducer(passwordReducer, {\n    // this is the initail state \n    value: '',\n    isValid: null\n  }); // useEffect(()=> {\n  //   const identifier = setTimeout(()=> {\n  //      setFormIsValid(\n  //       enteredPassword.trim().length > 6 && enteredEmail.includes('@')\n  //     );\n  //   }, 500);\n  //    return () => {\n  //      clearTimeout(identifier);\n  //    };\n  //   // whenever email or/and password change, the setFormIsValid() function gets excuted.\n  // }, [enteredEmail, enteredPassword]);\n  //we need to dispatch an action to update the email \n\n  const emailChangeHandler = event => {\n    //USER_INPUT is the action object's type and event.target.value is the action's vlaue \n    //and it is the value the user enter. \n    dispatchEmail({\n      type: 'USER_INPUT',\n      val: event.target.value\n    }); // setEnteredEmail(event.target.value);\n    // this can be managed by useEffect() Hook\n    //  setFormIsValid(\n    //     event.target.value.includes('@') && enteredPassword.trim().length > 6\n    //  );\n  };\n\n  const passwordChangeHandler = event => {\n    setEnteredPassword(event.target.value); //this can be managed by using the useEffect() Hook\n    // setFormIsValid(\n    //   enteredPassword.trim().length > 6 && enteredEmail.includes('@')\n    // );\n    //using useReducer()\n\n    setFormIsValid(emailState.isValid && passwordState.isValid);\n  }; //we need to dispatch an action to validate the email\n\n\n  const validateEmailHandler = () => {\n    dispatchEmail({\n      type: 'INPUT_BLUR'\n    }); // setEmailIsValid(enteredEmail.includes('@'));\n    // setEmailIsValid(emailState.isValid);\n  };\n\n  const validatePasswordHandler = () => {\n    setPasswordIsValid(enteredPassword.trim().length > 6);\n  };\n\n  const submitHandler = event => {\n    event.preventDefault(); // props.onLogin(enteredEmail, enteredPassword);\n\n    props.onLogin(emailState.value, enteredPassword);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.login,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${// emailIsValid === false ? classes.invalid : ''\n        emailState.isValid === false ? classes.invalid : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"E-Mail\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"email\" // value={enteredEmail}\n          ,\n          value: emailState.value,\n          onChange: emailChangeHandler,\n          onBlur: validateEmailHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${passwordIsValid === false ? classes.invalid : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          value: enteredPassword,\n          onChange: passwordChangeHandler,\n          onBlur: validatePasswordHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          className: classes.btn,\n          disabled: !formIsValid,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Login, \"U9EO88hwVYLuOr7GVPWgkGl7H10=\");\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["C:/Users/Eier/Desktop/Udmey/ReactHooks/src/components/Login/Login.js"],"names":["React","useState","useEffect","useReducer","Card","classes","Button","userEvent","emailReducer","state","action","type","value","val","isValid","includes","passwordReducer","Login","props","enteredPassword","setEnteredPassword","passwordIsValid","setPasswordIsValid","formIsValid","setFormIsValid","emailState","dispatchEmail","passwordState","dispatchPassword","emailChangeHandler","event","target","passwordChangeHandler","validateEmailHandler","validatePasswordHandler","trim","length","submitHandler","preventDefault","onLogin","login","control","invalid","actions","btn"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useReducer } from 'react';\n\nimport Card from '../UI/Card/Card';\nimport classes from './Login.module.css';\nimport Button from '../UI/Button/Button';\nimport userEvent from '@testing-library/user-event';\n\n// state here is the latest snapshot received and a new state to be returned \nconst emailReducer = (state, action) => {\n  //check the type of action\n  if(action.type === 'USER_INPUT'){\n    // this is the new state\n    return {value: action.val, isValid: action.val.includes('@')}; \n  }\n  if(action.type === 'INPUT:_BLUR'){\n    return {value: state.value, isValid: state.value.includes('@')};\n  }\n  // this is the initial state \n  return {value: '', isValid: false}; \n};\n\n// the reducer function that accepts an action and the latest snapshot and then returns a new \n// state \nconst passwordReducer = (state, action) => {\n  return {value: '', isValid: false}\n}; \n\nconst Login = (props) => {\n\n  // this two states about email can be managed combined using useReducer() Hook \n  // By giving an initial values like value: '', and isValid: false\n  // const [enteredEmail, setEnteredEmail] = useState('');\n  // const [emailIsValid, setEmailIsValid] = useState();\n\n  const [enteredPassword, setEnteredPassword] = useState('');\n  const [passwordIsValid, setPasswordIsValid] = useState();\n  const [formIsValid, setFormIsValid] = useState(false);\n  \n  //emailState here is the latest snapshot used in the re-render/re-evaluation cycle\n  //dispatchFn is a new action that triggers un update of the state\n  const [emailState, dispatchEmail] = useReducer(emailReducer, {\n\n    //this is the initial state \n    value: '',\n    isValid: null,\n  });\n\n  // the changes and the validation of password can be managed combined using useReducer()\n  const [passwordState, dispatchPassword] = useReducer(passwordReducer, {\n    // this is the initail state \n    value: '',\n    isValid: null,\n  });\n\n  // useEffect(()=> {\n  //   const identifier = setTimeout(()=> {\n  //      setFormIsValid(\n  //       enteredPassword.trim().length > 6 && enteredEmail.includes('@')\n  //     );\n  //   }, 500);\n\n  //    return () => {\n  //      clearTimeout(identifier);\n  //    };\n  //   // whenever email or/and password change, the setFormIsValid() function gets excuted.\n  // }, [enteredEmail, enteredPassword]);\n  \n  //we need to dispatch an action to update the email \n  const emailChangeHandler = (event) => {\n    //USER_INPUT is the action object's type and event.target.value is the action's vlaue \n    //and it is the value the user enter. \n    dispatchEmail({type: 'USER_INPUT', val: event.target.value});\n    // setEnteredEmail(event.target.value);\n   // this can be managed by useEffect() Hook\n  //  setFormIsValid(\n  //     event.target.value.includes('@') && enteredPassword.trim().length > 6\n  //  );\n  }; \n\n  const passwordChangeHandler = (event) => {\n    setEnteredPassword(event.target.value);\n    //this can be managed by using the useEffect() Hook\n    // setFormIsValid(\n    //   enteredPassword.trim().length > 6 && enteredEmail.includes('@')\n    // );\n   //using useReducer()\n    setFormIsValid(\n      emailState.isValid && passwordState.isValid \n    );\n  };\n   \n  //we need to dispatch an action to validate the email\n  const validateEmailHandler = () => {\n\n    dispatchEmail({type: 'INPUT_BLUR'});\n\n    // setEmailIsValid(enteredEmail.includes('@'));\n    // setEmailIsValid(emailState.isValid);\n  };\n\n  const validatePasswordHandler = () => {\n    setPasswordIsValid(enteredPassword.trim().length > 6);\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    // props.onLogin(enteredEmail, enteredPassword);\n    props.onLogin(emailState.value, enteredPassword);\n  };\n\n  return (\n    <Card className={classes.login}>\n      <form onSubmit={submitHandler}>\n        <div\n          className={`${classes.control} ${\n            // emailIsValid === false ? classes.invalid : ''\n            emailState.isValid === false ? classes.invalid : ''\n          }`}\n        >\n          <label htmlFor=\"email\">E-Mail</label>\n          <input\n            type=\"email\"\n            id=\"email\"\n            // value={enteredEmail}\n            value= {emailState.value}\n            onChange={emailChangeHandler}\n            onBlur={validateEmailHandler}\n          />\n        </div>\n        <div\n          className={`${classes.control} ${\n            passwordIsValid === false ? classes.invalid : ''\n          }`}\n        >\n          <label htmlFor=\"password\">Password</label>\n          <input\n            type=\"password\"\n            id=\"password\"\n            value={enteredPassword}\n            onChange={passwordChangeHandler}\n            onBlur={validatePasswordHandler}\n          />\n        </div>\n        <div className={classes.actions}>\n          <Button type=\"submit\" className={classes.btn} disabled={!formIsValid}>\n            Login\n          </Button>\n        </div>\n      </form>\n    </Card>\n  );\n};\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}